{
	"info": {
		"_postman_id": "ffa0ae97-db23-4780-a540-ec13bc14377b",
		"name": "DemoShopping",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39730520",
		"_collection_link": "https://www.postman.com/altimetry-administrator-42467067/workspace/rest/collection/39730520-ffa0ae97-db23-4780-a540-ec13bc14377b?action=share&source=collection_link&creator=39730520"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "id",
					"item": [
						{
							"name": "{productId}",
							"item": [
								{
									"name": "Поиск товара по ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Общие проверки",
													"pm.test(\"Статус код 200 или 404\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Время ответа < 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"// Если 200 — проверяем структуру",
													"if (pm.response.code === 200) {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.test(\"Поле id — number\", function () {",
													"        pm.expect(jsonData).to.have.property(\"product_id\").that.is.a(\"number\");",
													"    });",
													"    pm.test(\"Поле name — string\", function () {",
													"        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");",
													"    });",
													"    pm.test(\"Поле description — string\", function () {",
													"        pm.expect(jsonData).to.have.property(\"description\").that.is.a(\"string\");",
													"    });",
													"    pm.test(\"Поле price — number\", function () {",
													"        pm.expect(jsonData).to.have.property(\"price\").that.is.a(\"string\");",
													"    });",
													"    pm.test(\"Поле category — string\", function () {",
													"        pm.expect(jsonData).to.have.property(\"category\").that.is.a(\"string\");",
													"    });",
													"    pm.test(\"Поле manufacturer — string\", function () {",
													"        pm.expect(jsonData).to.have.property(\"manufacturer\").that.is.a(\"string\");",
													"    });",
													"    pm.test(\"Поле imageUrl — string\", function () {",
													"        pm.expect(jsonData).to.have.property(\"imageUrl\").that.is.a(\"string\");",
													"    });",
													"    pm.test(\"Поле freeShipping — boolean\", function () {",
													"        pm.expect(jsonData).to.have.property(\"freeShipping\").that.is.a(\"number\");",
													"    });",
													"}",
													"",
													"// Если 404 — проверяем сообщение или формат",
													"if (pm.response.code === 404) {",
													"    pm.test(\"Сообщение об ошибке присутствует\", function () {",
													"        // В зависимости от реализации сервер может вернуть JSON или текст",
													"        let ct = pm.response.headers.get(\"Content-Type\") || \"\";",
													"        if (ct.includes(\"application/json\")) {",
													"            const err = pm.response.json();",
													"            // пример: { message: \"Product not found\" }",
													"            pm.expect(err).to.have.property(\"message\");",
													"        } else {",
													"            pm.expect(pm.response.text()).to.be.a(\"string\");",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/products/id/{{idProduct}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"id",
												"{{idProduct}}"
											]
										}
									},
									"response": [
										{
											"name": "Данные о продукте",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<uri>\",\n  \"freeShipping\": \"<boolean>\",\n  \"id\": \"<integer>\"\n}"
										},
										{
											"name": "Товар с таким ID не найден",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Удаление товара по ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const status = pm.response.code;",
													"const bodyText = pm.response.text();",
													"",
													"if (status === 200) {",
													"    pm.test(\"✅ Товар успешно удалён\", function () {",
													"        pm.response.to.have.status(200);",
													"        pm.expect(bodyText).to.include(\"Товар удалён\");",
													"    });",
													"} else if (status === 403) {",
													"    pm.test(\"⛔️ Удаление товара запрещено\", function () {",
													"        pm.response.to.have.status(403);",
													"        pm.expect(bodyText).to.include(\"запрещено\");",
													"    });",
													"} else if (status === 404) {",
													"    pm.test(\"❌ Товар не найден\", function () {",
													"        pm.response.to.have.status(404);",
													"        pm.expect(bodyText).to.include(\"не найден\");",
													"    });",
													"} ",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/id/{{createdProductId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"id",
												"{{createdProductId}}"
											]
										}
									},
									"response": [
										{
											"name": "Товар успешно удалён",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Удаление этого товара запрещено",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Товар с таким ID не найден",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Полное обновление товара по ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const status = pm.response.code;",
													"const body = pm.response.text();",
													"",
													"if (status === 200) {",
													"    pm.test(\"✅ Товар успешно обновлён\", function () {",
													"        pm.response.to.have.status(200);",
													"        pm.expect(body).to.include(\"Товар обновлён\");",
													"    });",
													"} else if (status === 400) {",
													"    pm.test(\"❌ Неверные данные продукта\", function () {",
													"        pm.response.to.have.status(400);",
													"        pm.expect(body).to.include(\"Неправильный\");",
													"    });",
													"} else if (status === 404) {",
													"    pm.test(\"❌ Товар с таким ID не найден\", function () {",
													"        pm.response.to.have.status(404);",
													"        pm.expect(body).to.include(\"не найден\");",
													"    });",
													"} else {",
													"    pm.test(\"⚠️ Неожиданный статус ответа\", function () {",
													"        pm.expect.fail(`Неожиданный статус: ${status}`);",
													"    });",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{vault:authorization-secret}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Updated Product\",\n  \"description\": \"Updated description.\",\n  \"price\": 200,\n  \"category\": \"Updated Category\",\n  \"manufacturer\": \"Updated Manufacturer\",\n  \"imageUrl\": \"http://example.com/updated.jpg\",\n  \"freeShipping\": true\n}\n",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/products/id/{{createdProductId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"id",
												"{{createdProductId}}"
											]
										}
									},
									"response": [
										{
											"name": "Товар успешно обновлён",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<uri>\",\n  \"freeShipping\": \"<boolean>\",\n  \"id\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Неверные данные продукта",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<uri>\",\n  \"freeShipping\": \"<boolean>\",\n  \"id\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Товар с таким ID не найден",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<uri>\",\n  \"freeShipping\": \"<boolean>\",\n  \"id\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Частичное обновление товара по ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const status = pm.response.code;",
													"const body = pm.response.text();",
													"",
													"if (status === 200) {",
													"    pm.test(\"✅ Товар успешно обновлён (PATCH)\", function () {",
													"        pm.response.to.have.status(200);",
													"        pm.expect(body).to.include(\"Товар частично обновлён\");",
													"    });",
													"} else if (status === 400) {",
													"    pm.test(\"❌ Неверные данные продукта (PATCH)\", function () {",
													"        pm.response.to.have.status(400);",
													"        pm.expect(body).to.include(\"Неверные\");",
													"    });",
													"} else if (status === 404) {",
													"    pm.test(\"❌ Товар с таким ID не найден (PATCH)\", function () {",
													"        pm.response.to.have.status(404);",
													"        pm.expect(body).to.include(\"не найден\");",
													"    });",
													"} else {",
													"    pm.test(\"⚠️ Неожиданный статус ответа (PATCH)\", function () {",
													"        pm.expect.fail(`Неожиданный статус: ${status}`);",
													"    });",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"price\": 999.00,\n  \"name\": \"NewName\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/products/id/{{createdProductId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"id",
												"{{createdProductId}}"
											]
										}
									},
									"response": [
										{
											"name": "Товар успешно обновлён",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<uri>\",\n  \"freeShipping\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Неверные данные продукта",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<uri>\",\n  \"freeShipping\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Товар с таким ID не найден",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<uri>\",\n  \"freeShipping\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/products/id/:productId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"products",
														"id",
														":productId"
													],
													"variable": [
														{
															"key": "productId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "FindByCategory",
					"item": [
						{
							"name": "Поиск товаров по категории",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус ответа 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Ответ — массив\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Каждый объект имеет нужные поля\", function () {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(item => {",
											"        pm.expect(item).to.have.property(\"product_id\").that.is.a(\"number\");",
											"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"description\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"price\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"category\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"manufacturer\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"imageUrl\").that.is.a(\"string\");",
											"        pm.expect(item).to.have.property(\"freeShipping\").that.is.a(\"number\");",
											"    });",
											"});",
											"",
											"pm.test(\"Время ответа < 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products/FindByCategory?category=Phones",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										"FindByCategory"
									],
									"query": [
										{
											"key": "category",
											"value": "Phones",
											"description": "(Required) Категория продукта"
										},
										{
											"key": "category",
											"value": "Laptops",
											"description": "(Required) Категория продукта",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Watches",
											"description": "(Required) Категория продукта",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Pizzas",
											"description": "Не верная категория продукта",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Список продуктов по категории",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/products/FindByCategory?category=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"FindByCategory"
											],
											"query": [
												{
													"key": "category",
													"value": "<string>",
													"description": "(Required) Категория продукта"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  }\n]"
								},
								{
									"name": "Товары в данной категории не найдены",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/FindByCategory?category=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"FindByCategory"
											],
											"query": [
												{
													"key": "category",
													"value": "<string>",
													"description": "(Required) Категория продукта"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "FindByManufacturer",
					"item": [
						{
							"name": "Поиск товаров по производителю",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус ответа 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Ответ — массив\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Каждый объект имеет правильные поля\", function () {",
											"    const products = pm.response.json();",
											"    products.forEach(product => {",
											"        pm.expect(product).to.have.property(\"product_id\").that.is.a(\"number\");",
											"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"price\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"category\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"manufacturer\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"freeShipping\").that.is.a(\"number\");",
											"    });",
											"});",
											"",
											"pm.test(\"Время ответа < 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products/FindByManufacturer?manufacturer=Apple",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										"FindByManufacturer"
									],
									"query": [
										{
											"key": "manufacturer",
											"value": "Apple",
											"description": "(Required) Производитель продукта"
										},
										{
											"key": "manufacturer",
											"value": "Xiaomi",
											"description": "(Required) Производитель продукта",
											"disabled": true
										},
										{
											"key": "manufacturer",
											"value": "Samsung",
											"description": "(Required) Производитель продукта",
											"disabled": true
										},
										{
											"key": "manufacturer",
											"value": "Huawei",
											"description": "(Required) Производитель продукта",
											"disabled": true
										},
										{
											"key": "manufacturer",
											"value": "Quibec",
											"description": "Не верный производитель продукта",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Список продуктов по производителю",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/products/FindByManufacturer?manufacturer=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"FindByManufacturer"
											],
											"query": [
												{
													"key": "manufacturer",
													"value": "<string>",
													"description": "(Required) Производитель продукта"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  }\n]"
								},
								{
									"name": "Товары данного производителя не найдены",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/FindByManufacturer?manufacturer=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"FindByManufacturer"
											],
											"query": [
												{
													"key": "manufacturer",
													"value": "<string>",
													"description": "(Required) Производитель продукта"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "FindByShipping",
					"item": [
						{
							"name": "Поиск товаров с бесплатной доставкой",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус ответа 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Ответ — массив\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Каждый товар имеет нужные поля\", function () {",
											"    const products = pm.response.json();",
											"    products.forEach(product => {",
											"        pm.expect(product).to.have.property(\"product_id\").that.is.a(\"number\");",
											"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"price\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"category\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"manufacturer\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\");",
											"        pm.expect(product).to.have.property(\"freeShipping\").that.is.a(\"number\");",
											"    });",
											"});",
											"",
											"pm.test(\"Время ответа < 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products/FindByShipping?freeShipping=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										"FindByShipping"
									],
									"query": [
										{
											"key": "freeShipping",
											"value": "true",
											"description": "(Required) Наличие бесплатной доставки (true/false)"
										},
										{
											"key": "freeShipping",
											"value": "false",
											"description": "(Required) Наличие бесплатной доставки (true/false)",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Список продуктов с бесплатной доставкой",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/products/FindByShipping?freeShipping=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"FindByShipping"
											],
											"query": [
												{
													"key": "freeShipping",
													"value": "true",
													"description": "(Required) Наличие бесплатной доставки (true/false)"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  }\n]"
								},
								{
									"name": "Товары с указанным параметром бесплатной доставки не найдены",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/FindByShipping?freeShipping=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"FindByShipping"
											],
											"query": [
												{
													"key": "freeShipping",
													"value": "true",
													"description": "(Required) Наличие бесплатной доставки (true/false)"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "filter",
					"item": [
						{
							"name": "Фильтрация списка продуктов",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products/filter?category=<string>&manufacturer=<string>&freeShipping=<boolean>&minPrice=<number>&maxPrice=<number>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										"filter"
									],
									"query": [
										{
											"key": "category",
											"value": "<string>",
											"description": "Категория продукта"
										},
										{
											"key": "manufacturer",
											"value": "<string>",
											"description": "Производитель продукта"
										},
										{
											"key": "freeShipping",
											"value": "<boolean>",
											"description": "Наличие бесплатной доставки"
										},
										{
											"key": "minPrice",
											"value": "<number>",
											"description": "Минимальная цена продукта"
										},
										{
											"key": "maxPrice",
											"value": "<number>",
											"description": "Максимальная цена продукта"
										}
									]
								}
							},
							"response": [
								{
									"name": "Отфильтрованный список продуктов",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/products/filter?category=<string>&manufacturer=<string>&freeShipping=<boolean>&minPrice=<number>&maxPrice=<number>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"filter"
											],
											"query": [
												{
													"key": "category",
													"value": "<string>",
													"description": "Категория продукта"
												},
												{
													"key": "manufacturer",
													"value": "<string>",
													"description": "Производитель продукта"
												},
												{
													"key": "freeShipping",
													"value": "<boolean>",
													"description": "Наличие бесплатной доставки"
												},
												{
													"key": "minPrice",
													"value": "<number>",
													"description": "Минимальная цена продукта"
												},
												{
													"key": "maxPrice",
													"value": "<number>",
													"description": "Максимальная цена продукта"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  }\n]"
								},
								{
									"name": "Ошибка запроса",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products/filter?category=<string>&manufacturer=<string>&freeShipping=<boolean>&minPrice=<number>&maxPrice=<number>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products",
												"filter"
											],
											"query": [
												{
													"key": "category",
													"value": "<string>",
													"description": "Категория продукта"
												},
												{
													"key": "manufacturer",
													"value": "<string>",
													"description": "Производитель продукта"
												},
												{
													"key": "freeShipping",
													"value": "<boolean>",
													"description": "Наличие бесплатной доставки"
												},
												{
													"key": "minPrice",
													"value": "<number>",
													"description": "Минимальная цена продукта"
												},
												{
													"key": "maxPrice",
													"value": "<number>",
													"description": "Максимальная цена продукта"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Возвращает список всех продуктов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус-код 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Время ответа < 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Ответ — массив продуктов\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Каждый продукт имеет нужные поля и типы\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    jsonData.forEach(product => {",
									"        pm.expect(product).to.have.property(\"product_id\").that.is.a(\"number\");",
									"        pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");",
									"        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");",
									"        pm.expect(product).to.have.property(\"price\").that.is.a(\"string\");",
									"        pm.expect(product).to.have.property(\"category\").that.is.a(\"string\");",
									"        pm.expect(product).to.have.property(\"manufacturer\").that.is.a(\"string\");",
									"        pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\");",
									"        pm.expect(product).to.have.property(\"freeShipping\").that.is.a(\"number\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Список продуктов",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"price\": \"<number>\",\n    \"category\": \"<string>\",\n    \"manufacturer\": \"<string>\",\n    \"imageUrl\": \"<uri>\",\n    \"freeShipping\": \"<boolean>\",\n    \"id\": \"<integer>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Добавление нового продукта",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseText = pm.response.text();",
									"    const match = responseText.match(/ID:\\s*(\\d+)/);",
									"    if (match && match[1]) {",
									"        pm.environment.set(\"createdProductId\", match[1]);",
									"        console.log(\"✅ ID сохранён:\", match[1]);",
									"    } else {",
									"        console.log(\"⚠️ Не удалось извлечь ID из строки ответа\");",
									"    }",
									"}",
									"",
									"",
									"pm.test(\"Статус код 200 - продукт создан\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Время ответа < 1500 мс\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{vault:authorization-secret}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{nameProduct}}\",\n  \"description\": \"{{descProduct}}\",\n  \"price\": {{priceProduct}},\n  \"category\": \"{{categoryProduct}}\",\n  \"manufacturer\": \"{{manufProduct}}\",\n  \"imageUrl\": \"{{imageProduct}}\",\n  \"freeShipping\": true\n}\n",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/add-product",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"add-product"
							]
						}
					},
					"response": [
						{
							"name": "Продукт успешно добавлен",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<string>\",\n  \"freeShipping\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/add-product",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add-product"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Ошибка в данных продукта",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"price\": \"<number>\",\n  \"category\": \"<string>\",\n  \"manufacturer\": \"<string>\",\n  \"imageUrl\": \"<string>\",\n  \"freeShipping\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/add-product",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add-product"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "{cartItemId}",
					"item": [
						{
							"name": "Обновляет количество товара в корзине пользователя",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quantity\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cart/:cartItemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cart",
										":cartItemId"
									],
									"variable": [
										{
											"key": "cartItemId",
											"value": "<integer>",
											"description": "(Required) Идентификатор элемента в корзине"
										}
									]
								}
							},
							"response": [
								{
									"name": "Количество товара в корзине обновлено",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quantity\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Неверный запрос",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quantity\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Пользователь не авторизован",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quantity\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Элемент корзины не найден",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quantity\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Ошибка сервера",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quantity\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Удаляет товар из корзины пользователя",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cart/:cartItemId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cart",
										":cartItemId"
									],
									"variable": [
										{
											"key": "cartItemId",
											"value": "<integer>",
											"description": "(Required) Идентификатор удаляемого элемента корзины"
										}
									]
								}
							},
							"response": [
								{
									"name": "Товар успешно удален из корзины",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Неверный запрос",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Пользователь не авторизован",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Товар в корзине не найден",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Ошибка сервера",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cart/:cartItemId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cart",
												":cartItemId"
											],
											"variable": [
												{
													"key": "cartItemId"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Добавляет товар в корзину пользователя",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productId\": \"<integer>\",\n  \"quantity\": \"<integer>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": [
						{
							"name": "Товар успешно добавлен в корзину",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"<integer>\",\n  \"quantity\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cart"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Неверный запрос",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"<integer>\",\n  \"quantity\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cart"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Пользователь не авторизован",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"<integer>\",\n  \"quantity\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cart"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Ошибка сервера",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"<integer>\",\n  \"quantity\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/cart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cart"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Возвращает содержимое корзины пользователя",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/getCart",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"getCart"
							]
						}
					},
					"response": [
						{
							"name": "Содержимое корзины успешно получено",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/getCart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getCart"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Пользователь не авторизован",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/getCart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getCart"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Ошибка сервера",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/getCart",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"getCart"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{auth_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Авторизация пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();",
							"pm.environment.set(\"key\", res.token);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{user_login}}\",\n  \"password\": \"{{user_pswrd}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": [
				{
					"name": "Вход выполнен успешно",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Неверные данные пользователя",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Регистрация нового пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\") + \"/login\",",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            username: pm.environment.get(\"user_login\"),",
							"            password: pm.environment.get(\"user_pass\")",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    const json = res.JSON();",
							"    pm.environment.set(\"key\", json.token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{user_login}}\",\n  \"password\": \"{{user_pswrd}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": [
				{
					"name": "Регистрация выполнена успешно",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"register"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Неверные данные пользователя или пользователь уже существует",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"register"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Сброс базы данных",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/reset-database",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"reset-database"
					]
				},
				"description": "Удаляет все данные из базы данных и приводит её к первоначальной форме."
			},
			"response": [
				{
					"name": "Успешный сброс базы данных.",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reset-database",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reset-database"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Внутренняя ошибка сервера. Не удалось сбросить базу данных.",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/reset-database",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reset-database"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}